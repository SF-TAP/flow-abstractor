# global configuration
global:
  home:    /tmp/sf-tap
  timeout: 30  # close long-lived (over 30[s]) but do-nothing connections
  lru:     yes # bring the least recently used pattern to front of list
  cache:   yes # use cache for regex
  tcp_threads:   2
  regex_threads: 2

loopback7:
  if:     loopback7
  format: text

pcap:
  if: pcap

icmp:
  proto:  ICMP
  if:     icmp
  format: binary
  body:   yes

icmpv6:
  proto:  ICMPV6
  if:     icmpv6
  format: binary
  body:   yes

tcp_default:
  if:     default # for every flow that wasn't matched by any rules
  proto:  TCP
  format: text
  body:   yes

udp_default:
  if:     default # for every flow that wasn't matched by any rules
  proto:  UDP
  format: text
  body:   yes

http:
  up:     '^[-a-zA-Z]+ .+ HTTP/1\.(0\r?\n|1\r?\n([-a-zA-Z]+: .+\r?\n)+)'
  down:   '^HTTP/1\.[01] [1-9][0-9]{2} .+\r?\n'
  proto:  TCP  # TCP or UDP
  if:     http
  format: text # text or binary
  body:   yes  # if specified 'no', only header is output
  nice:   100  # the smaller a value is, the higher a priority is
  utf8:   no   # treat data as UTF8 or latin1 (binary). used for regex
#  balance: 4   # flows are balanced by 4 interfaces, must be power of 2

http_proxy:
  up:     '^(CONNECT|connect) .+ HTTP/1\.(0\r?\n|1\r?\n([-a-zA-Z]+: .+\r?\n)+)'
  down:   '^HTTP/1\.[01] 200 .+\r?\n'
  proto:  TCP  # TCP or UDP
  if:     http_proxy
  format: text # text or binary
  body:   yes  # if specified 'no', only header is output
  nice:   90   # the smaller a value is, the higher a priority is
  utf8:   no   # treat data as UTF8 or latin1 (binary)

websocket:
  up:     '^GET .+ HTTP/1.1\r\n'
  down:   '^HTTP/1.1 101 Switching Protocols\r\n'
  proto:  TCP  # TCP or UDP
  if:     websocket
  format: text # text or binary
  body:   yes  # if specified 'no', only header is output
  nice:   90   # the smaller a value is, the higher a priority is
  utf8:   no   # treat data as UTF8 or latin1 (binary)

torrent_tracker: # BitTorrent Tracker
  up:     '^GET .*(announce|scrape).*\?.*info_hash=.+&.+ HTTP/1\.(0\r?\n|1\r?\n([-a-zA-Z]+: .+\r?\n)+)'
  down:   '^HTTP/1\.[01] [1-9][0-9]{2} .+\r?\n'
  proto:  TCP
  if:     torrent_tracker
  format: text
  nice:   90
  utf8:   no

ssl:
  up:     '^((\x16\x03[\x00-\x03]..\x01...(\x02\x00|\x03[\x00-\x03]))|(..\x01(\x02\x00|\x03[\x00-\x03])))'
  down:   '^((\x16\x03[\x00-\x03]..\x02...(\x02\x00|\x03[\x00-\x03]))|(..\x02(\x02\x00|\x03[\x00-\x03])))'
  proto:  TCP
  if:     ssl
  body:   yes
  format: text
  nice:   100
  utf8:   no

ssh:
  up:     '^SSH-[12]\.[0-9]+-.+\r\n'
  down:   '^SSH-[12]\.[0-9]+-.+\r\n'
  proto:  TCP
  if:     ssh
  format: text
  nice:   100
  utf8:   no

irc:
  up:     '^(PASS .+\r\n)?USER .+\r\nNICK .+\r\n'
  down:   '^:.+ [0-9]{3} .+\r\n'
  proto:  TCP
  if:     irc
  format: text
  nice:   100
  utf8:   no

ftp:
  up:     '^USER .+\r\n'
  down:   '^220 .+\r\n'
  proto:  TCP
  if:     ftp
  format: text
  nice:   100
  utf8:   no

smtp:
  up:     '^(EH|HE)LO .+\r\n'
  down:   '^220 .+\r\n'
  proto:  TCP
  if:     smtp
  format: text
  nice:   100
  utf8:   no

pop:
  up:     '^\+OK .+\r\n'
  down:   '^USER .+\r\n'
  proto:  TCP
  if:     smtp
  format: text
  nice:   100
  utf8:   no

torrent_dht: # BitTorrent DHT
  up:     '^d.*1:y1:[eqr].*e$'
  proto:  UDP
  if:     torrent_dht
  format: text
  nice:   100
  utf8:   no

syslog_udp:
  up:     '^<([0-9]|[1-9][0-9]|1[0-8][0-9]|19[01])>'
  proto:  UDP
  if:     syslog
  format: text
  port:   514
  nice:   100
  utf8:   no

syslog_tcp:
  up:     '^([1-9][0-9]* )?<([0-9]|[1-9][0-9]|1[0-8][0-9]|19[01])>'
  down:   '^.?'
  proto:  TCP
  if:     syslog
  format: text
  port:   514
  nice:   100
  utf8:   no

dns_udp:
  proto:  UDP
  if:     dns
  port:   53,5353,5355 # 53: UDP DNS, 5353: multicast DNS, 5355: LLMNR
  format: text
  nice:   200
  utf8:   no

dns_tcp:
  proto:  TCP
  if:     dns
  port:   53
  format: binary
  nice:   200
  utf8:   no

